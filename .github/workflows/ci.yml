name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-smart-contracts:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json
    
    - name: Install dependencies
      run: |
        cd contracts
        npm ci
    
    - name: Compile contracts
      run: |
        cd contracts
        npm run compile
    
    - name: Run tests
      run: |
        cd contracts
        npm test
    
    - name: Run security audit
      run: |
        cd contracts
        npm audit --audit-level moderate
    
    - name: Generate coverage report
      run: |
        cd contracts
        npm run coverage || true

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint
    
    - name: Run type checking
      run: |
        cd frontend
        npm run type-check || true
    
    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    runs-on: ubuntu-latest
    needs: [test-smart-contracts, test-frontend]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd contracts
        npm ci
        cd ../frontend
        npm ci
    
    - name: Run performance tests
      run: |
        cd contracts
        node scripts/performance-test.js || true
    
    - name: Run gas optimization
      run: |
        cd contracts
        node scripts/optimize-gas.js || true

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-smart-contracts, test-frontend, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd contracts
        npm ci
        cd ../frontend
        npm ci
    
    - name: Deploy contracts to Sepolia
      run: |
        cd contracts
        npm run deploy:sepolia
      env:
        SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
    
    - name: Deploy frontend to Vercel
      uses: amondnet/vercel-action@v20
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-smart-contracts, test-frontend, security-scan, performance-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd contracts
        npm ci
        cd ../frontend
        npm ci
    
    - name: Deploy contracts to Mainnet
      run: |
        cd contracts
        npm run deploy:mainnet
      env:
        MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
    
    - name: Deploy frontend to Vercel
      uses: amondnet/vercel-action@v20
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from main branch
          
          Changes in this release:
          - See CHANGELOG.md for details
        draft: false
        prerelease: false
